{"version":3,"sources":["components/activity.js","components/input.js","App.js","serviceWorker.js","index.js"],"names":["Activity","console","log","this","props","entities","Entities","require","XmlEntities","className","content","title","location","format","startDateTime","stopDateTime","allowAttributes","allowElements","noHTML","decode","longDescription","React","Component","Input","handleMovieChange","idx","evt","newMovies","state","movies","map","movie","sidx","target","value","setState","handleRemoveMovie","filter","s","handleAddMovie","concat","clearInput","bind","parseInput","setDate","enableMovies","setMovieDescription","onCopyUrl","copyToggle","tomorrow","Date","xml","date","toLocaleDateString","copied","moviesEnabled","movieDescription","e","preventDefault","input","xmlRaw","trim","parsedXml","DOMParser","parseFromString","events","querySelectorAll","index","getElementsByTagName","innerHTML","shortDescription","key","setTimeout","checked","ref","type","placeholder","onChange","onClick","hasActivities","length","xmlLink","sourceLink","c","text","onCopy","url","rows","getMovies","getActivities","window","print","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a8d6da5.chunk.js","sourcesContent":["import React from 'react';\nimport Markup from 'interweave';\nimport Moment from 'react-moment';\n\nexport default class Activity extends React.Component {\n\n    render() {\n\n        console.log( this.props );\n\n        const Entities = require('html-entities').XmlEntities;\n\n        const entities = new Entities();\n\n        return(\n            <div className='activity-item'>\n                <h2 className='title'>\n                    <Markup content={ this.props.title } />\n                </h2>\n                <div className='metadata'>\n                    <div className='location'>\n                        <Markup content={ this.props.location } />\n                    </div>\n                    <div className='time'>\n                        <Moment format=\"LT\">{ this.props.startDateTime }</Moment> - <Moment format=\"LT\">{ this.props.stopDateTime }</Moment>\n                    </div>\n                </div>\n                <div className='description'>\n                    <Markup\n                        allowAttributes={ true }\n                        allowElements={ true }\n                        noHTML={ true }\n                        content={ entities.decode( this.props.longDescription ) } />\n                </div>\n            </div>\n        )\n\n    }\n}\n","import React from 'react';\nimport Moment from 'react-moment';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport ReactTimeout from 'react-timeout';\n\nimport Activity from './activity';\n\nexport default class Input extends React.Component {\n\n    constructor() {\n        super();\n\n        this.clearInput = this.clearInput.bind(this);\n        this.parseInput = this.parseInput.bind(this);\n\n        this.setDate = this.setDate.bind(this);\n        this.enableMovies = this.enableMovies.bind(this);\n        this.setMovieDescription = this.setMovieDescription.bind(this);\n        this.onCopyUrl = this.onCopyUrl.bind(this);\n        this.copyToggle = this.copyToggle.bind(this);\n\n        //const today = new Date();\n        const tomorrow = new Date( +new Date() + 86400000 );\n\n        this.state = {\n            xml: [],\n            date: tomorrow.toLocaleDateString(),\n            copied: false,\n            moviesEnabled: false,\n            movieDescription: 'Join us in our 16-seat theater to enjoy the movies scheduled today. Please speak with one of our guest advocates at the Front Desk to request popcorn. Movies are first come first serve, seats will not be reserved.',\n            movies: [\n                { movie: '8:00 AM - Movie Title (Rating)' },\n                { movie: '12:00 PM - Movie Title (Rating)' },\n                { movie: '3:00 PM - Movie Title (Rating)' },\n                { movie: '6:00 PM - Movie Title (Rating)' },\n                { movie: '9:00 PM - Movie Title (Rating)' },\n            ],\n\n        };\n    }\n\n    clearInput(e) {\n        e.preventDefault();\n\n        this.input.value = '';\n        this.setState({ xml: [] });\n    }\n\n    parseInput(e) {\n        e.preventDefault();\n\n        const xmlRaw = this.input.value.trim();\n\n        const parser = new DOMParser();\n        const parsedXml = parser.parseFromString( xmlRaw, \"text/xml\" );\n        const events = [...parsedXml.querySelectorAll( \"event\")];\n\n        this.setState({ xml: events });\n    }\n\n    getActivities() {\n        return this.state.xml.map((xml, index) => {\n\n            const title = xml.getElementsByTagName( 'title' )[0].innerHTML;\n            const location = xml.getElementsByTagName( 'locationname' )[0].innerHTML;\n            const startDateTime = xml.getElementsByTagName( 'startdate' )[0].innerHTML;\n            const stopDateTime = xml.getElementsByTagName( 'enddate' )[0].innerHTML;\n            const shortDescription = xml.getElementsByTagName( 'shortdescription' )[0].innerHTML;\n            const longDescription = xml.getElementsByTagName( 'longdescription' )[0].innerHTML.trim();\n\n            console.log(title);\n            return <Activity\n                title={ title }\n                location={ location }\n                startDateTime={ startDateTime }\n                stopDateTime={ stopDateTime }\n                shortDescription={ shortDescription }\n                longDescription={ longDescription }\n                key={ index }/>\n        });\n    }\n\n    setDate() {\n        this.setState({ date: this.date.value });\n    }\n\n    copyToggle() {\n        this.setState({ copied: !this.state.copied })\n    }\n\n    onCopyUrl() {\n      this.setState({ copied: true });\n      setTimeout( this.copyToggle, 5000 )\n    }\n\n    enableMovies(e) {\n        this.setState({ moviesEnabled: e.target.checked })\n    }\n    setMovieDescription() {\n        this.setState({ movieDescription: this.movieDescription.value });\n    }\n\n    getMovies() {\n        return this.state.movies.map((movie, index) => {\n\n            return (\n                <div className='movie-item' ref={ index }>\n\n                    <input\n                        className={ 'movie-timeslot' }\n                        type=\"text\"\n                        placeholder={ '00:00 AM - Movie Title (Rating)' }\n                        value={movie.movie}\n                        onChange={ this.handleMovieChange(index) }\n                    />\n                    <button\n                        className={ 'btn remove-movie' }\n                        type=\"button\"\n                        onClick={ this.handleRemoveMovie(index) }\n                    >\n                      Remove\n                    </button>\n                </div>\n                );\n        });\n    }\n\n    handleMovieChange = idx => evt => {\n        const newMovies = this.state.movies.map((movie, sidx) => {\n            if ( idx !== sidx ) return movie;\n            return { ...movie, movie: evt.target.value };\n        });\n\n        this.setState({ movies: newMovies });\n    };\n\n    handleRemoveMovie = idx => () => {\n        this.setState({\n            movies: this.state.movies.filter((s, sidx) => idx !== sidx)\n        });\n    };\n\n    handleAddMovie = () => {\n        this.setState({\n            movies: this.state.movies.concat([{ movie: '00:00 AM - Movie Title (Rating)' }])\n        });\n    };\n\n    handleMovieTimeChange() {\n\n    }\n\n    handleRemoveMovie() {\n\n    }\n\n    render() {\n        const hasActivities = this.state.xml.length ? true : false ;\n\n        const xmlLink = 'https://www.mountainviewgrand.com/activities-calendar.aspx?format=xmlfeed&startdate=' + this.state.date + '&enddate=' + this.state.date;\n        const sourceLink = 'view-source:' + xmlLink;\n\n        return (\n            <div className=\"container\">\n\n                <div className=\"input-container\">\n                    <h1>Activity Sheet Generator</h1>\n\n                    <div className='step-title'>Step  1</div>\n                    <p>Begin by entering the date that you want to pull activities for or use the default. The default is set to today's date. Make sure to use the format MM/DD/YYYY.</p>\n\n                    <div className='date-controls'>\n                        <div className='date-container'>\n                            <span className='date-title'>Date</span>\n                            <input\n                                className='date'\n                                placeholder={ this.state.date }\n                                ref={ c => this.date = c }\n                                onChange={ this.setDate }\n                            />\n                        </div>\n                        <div className='xml-link-container'>\n                            <CopyToClipboard\n                                text={ sourceLink }\n                                onCopy={ this.onCopyUrl }>\n                                    <button className='btn getXML'>\n                                        { this.state.copied ? 'URL Copied' : 'Copy Source URL' }\n                                    </button>\n                            </CopyToClipboard>\n                        </div>\n                    </div>\n\n                    <p className='view-source-url' ref={ c => this.url = c }>view-source:{ xmlLink }</p>\n\n                    <div className='step-title'>Step  2</div>\n                    <p>Copy the activity source URL and paste it into new Chrome browser window. Render the page and you will see a large block of XML code. Using keyboard shortcuts, select all (Ctrl A). Then copy (Ctrl C) all of the content.</p>\n\n                    <div className='step-title'>Step  3</div>\n                    <p>Return to this page and paste (Ctrl V) the copied XML into the textbox below. Then generate the activities list using the button below.</p>\n\n                    <textarea\n                        className='input'\n                        ref={ c => this.input = c }\n                        placeholder={ 'Paste the XML here...' }\n                        rows='10'\n                    />\n                    <div className='input-controls'>\n                        <div className='input-clear'>\n                            <button className='btn clear' onClick={ this.clearInput }>Clear XML Code</button>\n                        </div>\n                        <div className='input-submit'>\n                            <button className='btn submit' onClick={ this.parseInput }>Generate Activities</button>\n                        </div>\n                    </div>\n\n                </div>\n\n                <div className='movie-settings-container'>\n                    <div className='step-title'>Step  4</div>\n                    <h2>Movies</h2>\n                    <p>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={ this.state.moviesEnabled }\n                                onChange={ this.enableMovies }\n                            /> Enable Movie Times (Optional)\n                        </label>\n                    </p>\n                    { this.state.moviesEnabled &&\n                        <div className='movie-settings'>\n                            <p>Edit the movie information below as needed. If you do not want to show movie times on the activity sheet, simply disable this setting.</p>\n                            <textarea\n                                className='movie-description'\n                                ref={ c => this.movieDescription = c }\n                                placeholder={ 'Join us in our 16-seat theater to enjoy the movies scheduled today. Please speak with one of our guest advocates at the front desk to request popcorn. Movies are first come first serve, seats will not be reserved.' }\n                                rows='4'\n                                value={ this.state.movieDescription }\n                                onChange={ this.setMovieDescription }\n                            />\n                            <div className='movie-items'>\n                                { this.getMovies() }\n                                <button\n                                    className='btn add-movie'\n                                    type=\"button\"\n                                    onClick={ this.handleAddMovie }\n                                >\n                                  Add Timeslot\n                                </button>\n                            </div>\n                        </div>\n                    }\n                </div>\n\n                { hasActivities &&\n                    <div className='activities-container'>\n                        <div className='activities-header'>\n                            <h1>Activities</h1>\n                        </div>\n                        <div className='activity-items'>\n                            <div className='activity-item current-date'>\n                                <h1><Moment format=\"MMMM D, YYYY\">{ this.state.date }</Moment></h1>\n                            </div>\n                            { this.state.moviesEnabled &&\n                                <div className='activity-item'>\n                                    <h2 className='title'>\n                                        Daily Movie Schedule\n                                    </h2>\n                                    <div className='metadata'>\n                                        <div className='location'>\n                                            Movie Theater\n                                        </div>\n                                    </div>\n                                    <div className='description'>\n                                        <p>{ this.state.movieDescription }</p>\n                                        <ul>\n                                            { this.state.movies.map((movie, index) => {\n\n                                                return (\n                                                    <li ref={ index }>{movie.movie}</li>\n                                                    );\n                                            }) }\n                                        </ul>\n                                    </div>\n                                </div>\n                            }\n                            { this.getActivities() }\n                        </div>\n                        <div className='step-title last'>Step  5</div>\n                        <div className='print-page'>\n                            <button className=\"btn print\" onClick={ () => window.print() }>Print Activity Sheet</button>\n                            <p>When printing, make sure that the \"Headers and footers\" checkbox is <strong>not</strong> selected in the print dialog box. This setting is located in the \"More settings\" tab.</p>\n                        </div>\n                    </div>\n                }\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Input from './components/input'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Input />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}